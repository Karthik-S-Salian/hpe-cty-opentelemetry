input {
  kafka {
    bootstrap_servers => "127.0.0.1:9092"
    topics => ["otel-logs"]
    codec => "json"
    group_id => "logstash-group"
  }
}
filter {
  # Step 1: Parse nested MESSAGE (if exists)
  if [MESSAGE] {
    json {
      source => "MESSAGE"
      target => "parsed_message"
      remove_field => ["MESSAGE"]
    }
    mutate {
      rename => { "parsed_message" => "message" }
    }
  }

  # Step 2: If 'message' is a structured string, parse it
  grok {
    match => { "message" => "\[%{TIMESTAMP_ISO8601:log_time}\] %{WORD:http_method} %{URIPATH:http_route} -> %{NUMBER:http_status_code}" }
    tag_on_failure => ["_grokparsefailure"]
  }

  # Step 3: Convert log_time into @timestamp
  date {
    match => ["log_time", "ISO8601"]
    target => "@timestamp"
    tag_on_failure => ["_timestampparsefailure"]
  }

  # Step 4: Add static metadata (optional, based on your original payloads)
  mutate {
    add_field => {
      "service" => "my-service"
      "log_type" => "http-request"
      "env" => "dev"
      "host_ip" => "192.168.1.20"
    }
  }

  # Step 5: Build Loki labels and payload
  ruby {
    code => '
      require "json"
      log_data = event.to_hash
      timestamp = event.get("@timestamp")
      loki_time = (timestamp.to_f * 1_000_000_000).to_i.to_s

      def deep_get(hash, *keys)
        keys.reduce(hash) { |h, k| h.respond_to?(:[]) ? h[k] : nil }
      end

      label_keys = {
        "service" => "service",
        "instance_id" => "instance_id",
        "log_type" => "log_type",
        "method" => "http_method",
        "route" => "http_route",
        "status_code" => "http_status_code",
        "state" => "state",
        "env" => "env",
        "team" => "team",
        "host_ip" => "host_ip"
      }

      labels = {}

      label_keys.each do |label, key_path|
        value = log_data[key_path]
        labels[label] = value.to_s if value
      end

      loki_stream = {
        "streams": [
          {
            "stream": labels,
            "values": [
              [loki_time, JSON.generate(log_data)]
            ]
          }
        ]
      }

      event.set("[@metadata][loki_payload]", JSON.generate(loki_stream))
    '
  }
}


output {
  http {
    url => "http://localhost:3100/loki/api/v1/push"
    http_method => "post"
    format => "message"
    content_type => "application/json"
    message => "%{[@metadata][loki_payload]}"
  }

  stdout {
    codec => rubydebug
  }
}
